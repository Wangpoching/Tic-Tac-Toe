{"version":3,"sources":["index.js"],"names":["SquareContainer","BoardRow","GameContainer","GameBoard","GameInfo","calculateWinner","squares","line","a","b","c","Square","value","handleClick","onClick","Board","Game","useState","history","Array","fill","stepNumber","xIsNext","state","setState","console","log","status","current","winner","moves","map","step","move","desc","jumpTo","i","slice","length","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3495c3d6.chunk.js","sourcesContent":["import { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from '@emotion/styled/macro';\nimport './index.css';\n\nconst SquareContainer = styled.button`\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n  :focus {\n    outline: none;\n  }\n`\n\nconst BoardRow = styled.div`\n  :after {\n    clear: both;\n    content: \"\";\n    display: table;    \n  }\n`\n\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`\nconst GameBoard = styled.div`\n`\n\nconst GameInfo = styled.div`\n  margin-left: 20px;\n`\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (const line of lines) {\n    const [a, b, c] = line\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction Square({ value, handleClick }) {\n  return (\n    <SquareContainer \n      value={value}\n      onClick={handleClick}\n    >\n      {value}\n    </SquareContainer>\n  )\n}\n\nfunction Board({ squares, handleClick }) {\n  return (\n    <div>\n      <BoardRow>\n        <Square value={squares[0]} handleClick={handleClick(0)}></Square>\n        <Square value={squares[1]} handleClick={handleClick(1)}></Square>\n        <Square value={squares[2]} handleClick={handleClick(2)}></Square>\n      </BoardRow>\n      <BoardRow>\n        <Square value={squares[3]} handleClick={handleClick(3)}></Square>\n        <Square value={squares[4]} handleClick={handleClick(4)}></Square>\n        <Square value={squares[5]} handleClick={handleClick(5)}></Square>\n      </BoardRow>\n      <BoardRow>\n        <Square value={squares[6]} handleClick={handleClick(6)}></Square>\n        <Square value={squares[7]} handleClick={handleClick(7)}></Square>\n        <Square value={squares[8]} handleClick={handleClick(8)}></Square>\n      </BoardRow>\n    </div>\n  );\n}\n\nfunction Game() {\n  const [state, setState] = useState({\n    history: [{\n      squares: Array(9).fill(null)\n    }],\n    stepNumber: 0,\n    xIsNext: true\n  })\n  console.log(state)\n  const history = state.history;\n  const current = history[state.stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  const moves = history.map((step, move) => {\n    const desc = move ?\n      'Go to move #' + move :\n      'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (state.xIsNext ? 'X' : 'O');\n  }\n\n  // 跳回歷史紀錄\n  function jumpTo(step) {\n    setState({\n      ...state,\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  // 出棋\n  function handleClick(i) {\n    return () => {\n      // 回到歷史時，把它當作新的起點\n      const history = state.history.slice(0, state.stepNumber + 1)\n      const current = history[history.length - 1]\n      const squares = current.squares.slice()\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n      squares[i] = state.xIsNext ? 'X' : 'O';\n      setState({\n        history: history.concat([{\n          squares: squares,\n        }]),\n        stepNumber: history.length,\n        xIsNext: !state.xIsNext\n      });\n    }\n  }\n\n  return (  \n    <GameContainer>\n      <GameBoard>\n        <Board\n          squares={current.squares}\n          handleClick={(i) => handleClick(i)}\n        />\n      </GameBoard>\n      <GameInfo>\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </GameInfo>\n    </GameContainer>\n  )\n}\n\nReactDOM.render(\n    <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}